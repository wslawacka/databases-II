-- MySQL Script generated by MySQL Workbench
-- Wed Apr  2 18:22:12 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema library_denormalized
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `library_denormalized` ;

-- -----------------------------------------------------
-- Schema library_denormalized
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `library_denormalized` DEFAULT CHARACTER SET utf8 ;
USE `library_denormalized` ;

-- -----------------------------------------------------
-- Table `library_denormalized`.`city`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library_denormalized`.`city` ;

CREATE TABLE IF NOT EXISTS `library_denormalized`.`city` (
                                                             `id_city` INT NOT NULL AUTO_INCREMENT,
                                                             `name` VARCHAR(45) NOT NULL,
    PRIMARY KEY (`id_city`),
    UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library_denormalized`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library_denormalized`.`address` ;

CREATE TABLE IF NOT EXISTS `library_denormalized`.`address` (
                                                                `id_address` INT NOT NULL AUTO_INCREMENT,
                                                                `street_name` VARCHAR(45) NOT NULL,
    `house_number` VARCHAR(10) NOT NULL,
    `FK_city` INT NOT NULL,
    PRIMARY KEY (`id_address`),
    INDEX `fk_address_city1_idx` (`FK_city` ASC) VISIBLE,
    CONSTRAINT `fk_address_city1`
    FOREIGN KEY (`FK_city`)
    REFERENCES `library_denormalized`.`city` (`id_city`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `library_denormalized`.`member`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library_denormalized`.`member` ;

CREATE TABLE IF NOT EXISTS `library_denormalized`.`member` (
                                                               `id_member` INT NOT NULL AUTO_INCREMENT,
                                                               `name` VARCHAR(45) NOT NULL,
    `surname` VARCHAR(45) NOT NULL,
    `phone_number` VARCHAR(15) NOT NULL,
    `email_address` VARCHAR(45) NOT NULL,
    `birth_date` DATE NOT NULL,
    `membership_date_from` DATE NOT NULL,
    `membership_date_to` DATE NOT NULL,
    `FK_address` INT NOT NULL,
    PRIMARY KEY (`id_member`),
    UNIQUE INDEX `phone_number_UNIQUE` (`phone_number` ASC) VISIBLE,
    UNIQUE INDEX `email_address_UNIQUE` (`email_address` ASC) VISIBLE,
    INDEX `fk_member_address1_idx` (`FK_address` ASC) VISIBLE,
    CONSTRAINT `fk_member_address1`
    FOREIGN KEY (`FK_address`)
    REFERENCES `library_denormalized`.`address` (`id_address`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library_denormalized`.`genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library_denormalized`.`genre` ;

CREATE TABLE IF NOT EXISTS `library_denormalized`.`genre` (
                                                              `id_genre` INT NOT NULL AUTO_INCREMENT,
                                                              `name` VARCHAR(45) NOT NULL,
    `description` TEXT NULL,
    PRIMARY KEY (`id_genre`),
    UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library_denormalized`.`book`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library_denormalized`.`book` ;

CREATE TABLE IF NOT EXISTS `library_denormalized`.`book` (
                                                             `id_book` INT NOT NULL AUTO_INCREMENT,
                                                             `title` VARCHAR(100) NOT NULL,
    `publication_year` YEAR NOT NULL,
    `ISBN` VARCHAR(20) NOT NULL,
    `genre_name` VARCHAR(45) NULL,
    `author_1_id` INT NOT NULL,
    `author_2_id` INT NULL DEFAULT NULL,
    `author_3_id` INT NULL DEFAULT NULL,
    `FK_genre` INT NULL,
    PRIMARY KEY (`id_book`),
    UNIQUE INDEX `ISBN_UNIQUE` (`ISBN` ASC) VISIBLE,
    INDEX `fk_book_genre1_idx` (`FK_genre` ASC) VISIBLE,
    CONSTRAINT `fk_book_genre1`
    FOREIGN KEY (`FK_genre`)
    REFERENCES `library_denormalized`.`genre` (`id_genre`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library_denormalized`.`reservation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library_denormalized`.`reservation` ;

CREATE TABLE IF NOT EXISTS `library_denormalized`.`reservation` (
                                                                    `id_reservation` INT NOT NULL AUTO_INCREMENT,
                                                                    `reservation_date` DATE NOT NULL,
                                                                    `due_date` DATE NOT NULL,
                                                                    `return_date` DATE NULL,
                                                                    `status` ENUM('borrowed', 'returned') NOT NULL DEFAULT 'borrowed',
    `book_title` VARCHAR(100) NOT NULL,
    `book_ISBN` VARCHAR(20) NOT NULL,
    `member_name` VARCHAR(45) NOT NULL,
    `member_surname` VARCHAR(45) NOT NULL,
    `FK_member` INT NOT NULL,
    `FK_book` INT NOT NULL,
    PRIMARY KEY (`id_reservation`),
    INDEX `fk_reservation_member_idx` (`FK_member` ASC) VISIBLE,
    INDEX `fk_reservation_book1_idx` (`FK_book` ASC) VISIBLE,
    UNIQUE INDEX `book_ISBN_UNIQUE` (`book_ISBN` ASC) VISIBLE,
    CONSTRAINT `fk_reservation_member`
    FOREIGN KEY (`FK_member`)
    REFERENCES `library_denormalized`.`member` (`id_member`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_reservation_book1`
    FOREIGN KEY (`FK_book`)
    REFERENCES `library_denormalized`.`book` (`id_book`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library_denormalized`.`nationality`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library_denormalized`.`nationality` ;

CREATE TABLE IF NOT EXISTS `library_denormalized`.`nationality` (
                                                                    `id_nationality` INT NOT NULL AUTO_INCREMENT,
                                                                    `name` VARCHAR(45) NOT NULL,
    PRIMARY KEY (`id_nationality`),
    UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library_denormalized`.`author`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library_denormalized`.`author` ;

CREATE TABLE IF NOT EXISTS `library_denormalized`.`author` (
                                                               `id_author` INT NOT NULL AUTO_INCREMENT,
                                                               `name` VARCHAR(45) NOT NULL,
    `surname` VARCHAR(45) NOT NULL,
    `birth_date` DATE NOT NULL,
    `FK_nationality` INT NOT NULL,
    PRIMARY KEY (`id_author`),
    INDEX `fk_author_nationality1_idx` (`FK_nationality` ASC) VISIBLE,
    CONSTRAINT `fk_author_nationality1`
    FOREIGN KEY (`FK_nationality`)
    REFERENCES `library_denormalized`.`nationality` (`id_nationality`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library_denormalized`.`book_author`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library_denormalized`.`book_author` ;

CREATE TABLE IF NOT EXISTS `library_denormalized`.`book_author` (
                                                                    `id_book_author` INT NOT NULL AUTO_INCREMENT,
                                                                    `FK_book` INT NOT NULL,
                                                                    `FK_author` INT NOT NULL,
                                                                    PRIMARY KEY (`id_book_author`),
    INDEX `fk_book_author_book1_idx` (`FK_book` ASC) VISIBLE,
    INDEX `fk_book_author_author1_idx` (`FK_author` ASC) VISIBLE,
    CONSTRAINT `fk_book_author_book1`
    FOREIGN KEY (`FK_book`)
    REFERENCES `library_denormalized`.`book` (`id_book`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_book_author_author1`
    FOREIGN KEY (`FK_author`)
    REFERENCES `library_denormalized`.`author` (`id_author`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;



DELIMITER $$

CREATE TRIGGER before_reservation_insert
    BEFORE INSERT ON reservation
    FOR EACH ROW
BEGIN
    DECLARE book_title VARCHAR(100);
    DECLARE book_isbn VARCHAR(20);
    DECLARE member_name VARCHAR(45);
    DECLARE member_surname VARCHAR(45);

    SELECT title, ISBN INTO book_title, book_isbn
    FROM book
    WHERE id_book = NEW.FK_book;

    SELECT name, surname INTO member_name, member_surname
    FROM member
    WHERE id_member = NEW.FK_member;

    SET NEW.book_title = book_title;
    SET NEW.book_ISBN = book_isbn;
    SET NEW.member_name = member_name;
    SET NEW.member_surname = member_surname;
END $$


CREATE TRIGGER after_author_delete
    AFTER DELETE ON author
    FOR EACH ROW
BEGIN
    UPDATE book
    SET author_1_id = NULL
    WHERE author_1_id = OLD.id_author;

    UPDATE book
    SET author_2_id = NULL
    WHERE author_2_id = OLD.id_author;

    UPDATE book
    SET author_3_id = NULL
    WHERE author_3_id = OLD.id_author;

    DELETE FROM book_author WHERE FK_author = OLD.id_author;
END $$


CREATE TRIGGER after_book_update
    AFTER UPDATE ON book
    FOR EACH ROW
BEGIN
    UPDATE reservation
    SET book_title = NEW.title,
        book_ISBN = NEW.ISBN
    WHERE book_ISBN = OLD.ISBN;
END $$


CREATE TRIGGER after_member_update
    AFTER UPDATE ON member
    FOR EACH ROW
BEGIN
    UPDATE reservation
    SET member_name = NEW.name,
        member_surname = NEW.surname
    WHERE FK_member = OLD.id_member;
END $$


CREATE TRIGGER after_book_delete
    AFTER DELETE ON book
    FOR EACH ROW
BEGIN
    DELETE FROM reservation
    WHERE FK_book = OLD.id_book;
END $$


CREATE TRIGGER after_member_delete
    AFTER DELETE ON member
    FOR EACH ROW
BEGIN
    DELETE FROM reservation
    WHERE FK_member = OLD.id_member;
END $$


CREATE TRIGGER after_author_update
    AFTER UPDATE ON author
    FOR EACH ROW
BEGIN
    UPDATE book_author
    SET FK_author = NEW.id_author
    WHERE FK_author = OLD.id_author;

    UPDATE book
    SET author_1_id = NEW.id_author
    WHERE author_1_id = OLD.id_author;

    UPDATE book
    SET author_2_id = NEW.id_author
    WHERE author_2_id = OLD.id_author;

    UPDATE book
    SET author_3_id = NEW.id_author
    WHERE author_3_id = OLD.id_author;
END $$


CREATE TRIGGER after_genre_update
    AFTER UPDATE ON genre
    FOR EACH ROW
BEGIN
    UPDATE book
    SET genre_name = NEW.name
    WHERE FK_genre = OLD.id_genre;
END $$


DROP PROCEDURE IF EXISTS InsertCities$$
CREATE PROCEDURE InsertCities(IN number_of_records INT)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE random_name VARCHAR(45);
    DECLARE random_adjective VARCHAR(20);
    DECLARE random_feature VARCHAR(20);
    DECLARE random_number INT;

START TRANSACTION;

WHILE i < number_of_records DO

        REPEAT
            SET random_adjective = ELT(FLOOR(1 + RAND() * 19),
                                       'Green', 'Sunny', 'Crystal', 'Silver', 'Red', 'Mountain', 'River', 'Blue',
                                       'Golden', 'Bright', 'New', 'West', 'North', 'East', 'South', 'Little', 'Big',
                                       'Cold', 'Warm');
            SET random_feature = ELT(FLOOR(1 + RAND() * 18),
                                     'River', 'Hill', 'Lake', 'Valley', 'Forest', 'Park', 'Beach', 'Bay', 'Point',
                                     'Grove', 'Spring', 'Cliff', 'Creek', 'Island', 'Shore', 'Cove', 'Peak', 'Wood');
            SET random_number = FLOOR(1000 + RAND() * 9000);
            SET random_name = CONCAT(random_adjective, random_feature, '-', random_number);
            IF LENGTH(random_name) > 45 THEN
                SET random_name = LEFT(random_name, 45);
END IF;

        UNTIL NOT EXISTS (SELECT 1 FROM `library_denormalized`.`city` WHERE name = random_name)
END REPEAT;

INSERT INTO `library_denormalized`.`city`(name)
VALUES (random_name);

SET i = i + 1;

END WHILE;

COMMIT;

END $$


DROP PROCEDURE IF EXISTS InsertAddresses$$
CREATE PROCEDURE InsertAddresses(IN number_of_records INT)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE random_street_name VARCHAR(45);
    DECLARE random_house_number VARCHAR(10);
    DECLARE city_id INT;
    DECLARE done INT DEFAULT 0;

    DECLARE city_cursor CURSOR FOR SELECT id_city FROM `library_denormalized`.`city`;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    START TRANSACTION;

    OPEN city_cursor;

    WHILE i < number_of_records DO

            FETCH city_cursor INTO city_id;
            IF done THEN
                SET done = 0;
                CLOSE city_cursor;
                OPEN city_cursor;
                FETCH city_cursor INTO city_id;
            END IF;

            SET random_street_name = ELT(FLOOR(1 + RAND() * 50),
                                         'Bamboo Road','Cypress Drive','Lotus Boulevard','Sunflower Drive','Almond Road','Maple Avenue',
                                         'Hazel Lane','Birch Drive','Linden Road','Juniper Street','Pinecone Way','Geranium Drive',
                                         'Orchid Avenue','Sycamore Street','Daisy Lane','Magnolia Lane','Acacia Road','Ash Street',
                                         'Daffodil Lane','Fuchsia Way','Clover Street','Cherry Blossom Road','Mimosa Lane','Marigold Avenue',
                                         'Pine Road','Oak Street','Redwood Drive','Ivy Street','Camellia Avenue','Lilac Way',
                                         'Jasmine Boulevard','Saffron Street','Cinnamon Road','Magnolia Lane','Cedar Lane','Rosemary Street',
                                         'Elm Street','Wisteria Drive','Spruce Drive','Violet Road','Cherry Boulevard','Azalea Way',
                                         'Poppy Street','Hickory Avenue','Sequoia Way','Willow Way','Tulip Avenue','Mulberry Avenue',
                                         'Lavender Road','Buttercup Street');
            SET random_house_number = ELT(FLOOR(1 + RAND() * 50),
                                          '52','28','17','55','44','22','12','46','6','49',
                                          '31','2','35','13','48','53','20','23','19','51',
                                          '43','38','7','45','50','58','21','11','29','57',
                                          '37','15','33','4','3','41','16','56','1','32',
                                          '34','27','24','30','8','9','18','47','39','36'

                                      );

            INSERT INTO `library_denormalized`.`address`(street_name, house_number, FK_city)
            VALUES(random_street_name, random_house_number, city_id);

            SET i = i + 1;

        END WHILE;
    CLOSE city_cursor;
    COMMIT;

END $$


DROP PROCEDURE IF EXISTS InsertGenres$$
CREATE PROCEDURE InsertGenres(IN number_of_records INT)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE random_name VARCHAR(45);
    DECLARE random_description TEXT;
    DECLARE random_adjective VARCHAR(20);
    DECLARE random_theme VARCHAR(20);
    DECLARE random_number INT;

    START TRANSACTION;

    WHILE i < number_of_records DO
            REPEAT
                SET random_adjective = ELT(FLOOR(1 + RAND() * 15),
                                           'Epic', 'Dark', 'Futuristic', 'Mythic', 'Ancient', 'Enchanted',
                                           'Mysterious', 'Lost', 'Secret', 'Forbidden', 'Infinite',
                                           'Legendary', 'Parallel', 'Celestial', 'Obscure');
                SET random_theme = ELT(FLOOR(1 + RAND() * 15),
                                       'Fantasy', 'Chronicles', 'Mystery', 'Saga', 'Realm', 'Tales',
                                       'Cyberpunk', 'Horror', 'Mythology', 'Adventure', 'Thriller',
                                       'Dystopia', 'Romance', 'Paradox', 'Expedition');
                SET random_number = FLOOR(100 + RAND() * 900);
                SET random_name = CONCAT(random_adjective, ' ', random_theme, ' ', random_number);
                IF LENGTH(random_name) > 45 THEN
                    SET random_name = LEFT(random_name, 45);
                END IF;
            UNTIL NOT EXISTS (SELECT 1 FROM `library_denormalized`.`genre` WHERE name = random_name)
                END REPEAT;
            SET random_description = CONCAT('A unique blend of ', random_adjective, ' and ', random_theme, ' stories.');

            INSERT INTO `library_denormalized`.`genre`(name, description)
            VALUES (random_name, random_description);

            SET i = i + 1;

        END WHILE;

    COMMIT;

END $$


DROP PROCEDURE IF EXISTS InsertNationalities$$
CREATE PROCEDURE InsertNationalities(IN number_of_records INT)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE random_name VARCHAR(45);
    DECLARE random_prefix VARCHAR(10);
    DECLARE random_base VARCHAR(20);
    DECLARE random_suffix VARCHAR(10);
    DECLARE random_number INT;

    START TRANSACTION;

    WHILE i < number_of_records DO
            REPEAT
                SET random_prefix = ELT(FLOOR(1 + RAND() * 6),
                                        '', 'Rep.', 'Fed.', 'Kingdom', 'State', 'Empire');
                SET random_base = ELT(FLOOR(1 + RAND() * 20),
                                      'Atlantis', 'Avalon', 'Zetonia', 'Eldor', 'Nordic', 'Valer',
                                      'Azuri', 'Dracon', 'Celest', 'Novar', 'Verid', 'Orion',
                                      'Solter', 'Lumin', 'Zephyr', 'Mystar', 'Arcan', 'Vesper',
                                      'Thalas', 'Merid');
                SET random_suffix = ELT(FLOOR(1 + RAND() * 5),
                                        '', ' Union', ' State', ' Confed.', ' Nation');
                SET random_number = FLOOR(10 + RAND() * 90);
                SET random_name = TRIM(CONCAT(random_prefix, ' ', random_base, random_suffix, ' ', random_number));
                IF LENGTH(random_name) > 45 THEN
                    SET random_name = LEFT(random_name, 45);
                END IF;
            UNTIL NOT EXISTS (SELECT 1 FROM `library_denormalized`.`nationality` WHERE name = random_name)
                END REPEAT;

            INSERT INTO `library_denormalized`.`nationality`(name)
            VALUES (random_name);

            SET i = i + 1;

        END WHILE;

    COMMIT;

END $$


DROP PROCEDURE IF EXISTS InsertMembers$$
CREATE PROCEDURE InsertMembers(IN number_of_records INT)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE random_name VARCHAR(45);
    DECLARE random_surname VARCHAR(45);
    DECLARE random_birth_date DATE;
    DECLARE random_phone_number VARCHAR(15);
    DECLARE random_email_address VARCHAR(45);
    DECLARE address_id INT;
    DECLARE done INT DEFAULT 0;
    DECLARE random_membership_date_from DATE;
    DECLARE random_membership_date_to DATE;

    DECLARE address_cursor CURSOR FOR SELECT id_address FROM `library_denormalized`.`address`;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    START TRANSACTION;

    OPEN address_cursor;

    WHILE i < number_of_records DO

            FETCH address_cursor INTO address_id;
            IF done THEN
                SET done = 0;
                CLOSE address_cursor;
                OPEN address_cursor;
                FETCH address_cursor INTO address_id;
            END IF;

            SET random_name = ELT(FLOOR(1 + RAND() * 50),
                                  'Aiden', 'Bella', 'Caleb', 'Daisy', 'Ethan', 'Fiona', 'Gavin', 'Hannah', 'Isaac',
                                  'Jasmine', 'Kai', 'Luna', 'Mason', 'Nora', 'Owen', 'Piper', 'Quinn', 'Riley', 'Samuel',
                                  'Tessa', 'Uriel', 'Violet', 'Wyatt', 'Xena', 'Yara', 'Zane', 'Amelia', 'Blake', 'Cora',
                                  'Declan', 'Eliana', 'Felix', 'Grace', 'Hudson', 'Ivy', 'Jacob', 'Kylie', 'Leo', 'Mila',
                                  'Nathan','Olivia', 'Preston', 'Quincy', 'Ryan', 'Sophia', 'Tristan', 'Ulysses',
                                  'Victoria', 'William', 'Zoey');
            SET random_surname = ELT(FLOOR(1 + RAND() * 50),
                                     'Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis',
                                     'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson',
                                     'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson', 'White',
                                     'Harris', 'Sanchez', 'Clark', 'Ramirez', 'Lewis', 'Robinson', 'Walker', 'Young',
                                     'Allen', 'King', 'Wright', 'Scott', 'Torres', 'Nguyen', 'Hill', 'Flores', 'Green',
                                     'Adams', 'Nelson', 'Baker', 'Hall', 'Rivera', 'Campbell', 'Mitchell', 'Carter',
                                     'Roberts');
            SET random_birth_date = DATE_SUB(CURDATE(), INTERVAL FLOOR(18 + RAND() * 42) YEAR);
            SET random_birth_date = DATE_SUB(random_birth_date, INTERVAL FLOOR(RAND() * 365) DAY);
            SET random_membership_date_from = DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND() * DATEDIFF(CURDATE(), '2020-01-01')) DAY);
            SET random_membership_date_to = DATE_ADD(random_membership_date_from, INTERVAL FLOOR(30 + RAND() * 1035) DAY);

            REPEAT
                SET random_phone_number = CONCAT('+1', FLOOR(1000000000 + RAND() * 9000000000));
            UNTIL NOT EXISTS (SELECT 1 FROM `library_denormalized`.`member` WHERE phone_number = random_phone_number)
                END REPEAT;
            REPEAT
                SET random_email_address = CONCAT(LOWER(random_name), '.', LOWER(random_surname),
                                                  FLOOR(1 + RAND() * 1000), '@example.com');
            UNTIL NOT EXISTS (SELECT 1 FROM `library_denormalized`.`member` WHERE email_address = random_email_address)
                END REPEAT;

            INSERT INTO `library_denormalized`.`member`(name, surname, phone_number, email_address, birth_date,
                                                        membership_date_from, membership_date_to, FK_address)
            VALUES (random_name, random_surname, random_phone_number,
                    random_email_address, random_birth_date,
                    random_membership_date_from,  random_membership_date_to,
                    address_id);

            SET i = i + 1;

        END WHILE;
    CLOSE address_cursor;
    COMMIT;

END $$


DROP PROCEDURE IF EXISTS InsertAuthors$$
CREATE PROCEDURE InsertAuthors(IN number_of_records INT)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE random_name VARCHAR(45);
    DECLARE random_surname VARCHAR(45);
    DECLARE random_birth_date DATE;
    DECLARE nationality_id INT;
    DECLARE done INT DEFAULT 0;

    DECLARE nationality_cursor CURSOR FOR SELECT id_nationality FROM `library_denormalized`.`nationality`;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    START TRANSACTION;

    OPEN nationality_cursor;

    WHILE i < number_of_records DO

            FETCH nationality_cursor INTO nationality_id;
            IF done THEN
                SET done = 0;
                CLOSE nationality_cursor;
                OPEN nationality_cursor;
                FETCH nationality_cursor INTO nationality_id;
            END IF;

            SET random_name = ELT(FLOOR(1 + RAND() * 50),
                                  'Aiden', 'Bella', 'Caleb', 'Daisy', 'Ethan', 'Fiona', 'Gavin', 'Hannah', 'Isaac',
                                  'Jasmine', 'Kai', 'Luna', 'Mason', 'Nora', 'Owen', 'Piper', 'Quinn', 'Riley', 'Samuel',
                                  'Tessa', 'Uriel', 'Violet', 'Wyatt', 'Xena', 'Yara', 'Zane', 'Amelia', 'Blake', 'Cora',
                                  'Declan', 'Eliana', 'Felix', 'Grace', 'Hudson', 'Ivy', 'Jacob', 'Kylie', 'Leo', 'Mila',
                                  'Nathan','Olivia', 'Preston', 'Quincy', 'Ryan', 'Sophia', 'Tristan', 'Ulysses',
                                  'Victoria', 'William', 'Zoey');
            SET random_surname = ELT(FLOOR(1 + RAND() * 50),
                                     'Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis',
                                     'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson',
                                     'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson', 'White',
                                     'Harris', 'Sanchez', 'Clark', 'Ramirez', 'Lewis', 'Robinson', 'Walker', 'Young',
                                     'Allen', 'King', 'Wright', 'Scott', 'Torres', 'Nguyen', 'Hill', 'Flores', 'Green',
                                     'Adams', 'Nelson', 'Baker', 'Hall', 'Rivera', 'Campbell', 'Mitchell', 'Carter',
                                     'Roberts');
            SET random_birth_date = DATE_SUB(CURDATE(), INTERVAL FLOOR(18 + RAND() * 42) YEAR);
            SET random_birth_date = DATE_SUB(random_birth_date, INTERVAL FLOOR(RAND() * 365) DAY);

            INSERT INTO `library_denormalized`.`author`(name, surname, birth_date, FK_nationality)
            VALUES (random_name, random_surname, random_birth_date, nationality_id);

            SET i = i + 1;

        END WHILE;
    CLOSE nationality_cursor;
    COMMIT;

END $$


DROP PROCEDURE IF EXISTS InsertBooks$$
CREATE PROCEDURE InsertBooks(IN number_of_records INT)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE random_title VARCHAR(100);
    DECLARE random_publication_year YEAR;
    DECLARE random_ISBN VARCHAR(20);
    DECLARE genre_id INT;
    DECLARE author_1_id INT;
    DECLARE author_2_id INT;
    DECLARE author_3_id INT;
    DECLARE done INT DEFAULT 0;
    DECLARE genre_name VARCHAR(45);

    DECLARE genre_cursor CURSOR FOR SELECT id_genre, name FROM `library_denormalized`.`genre`;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    START TRANSACTION;

    OPEN genre_cursor;

    WHILE i < number_of_records DO
            FETCH genre_cursor INTO genre_id, genre_name;
            IF done THEN
                SET done = 0;
                CLOSE genre_cursor;
                OPEN genre_cursor;
                FETCH genre_cursor INTO genre_id, genre_name;
            END IF;

            SET random_title = ELT(FLOOR(1 + RAND() * 50),
                                   'The Silent Echo','Whispers of the Past','Journey to the Unknown','Beyond the Horizon',
                                   'The Last Secret','Echoes in the Dark','Tides of Destiny','Shadows of the Forgotten',
                                   'The Painted Sky','Dreams of Tomorrow','The Hidden Path','The Clockwork Heart',
                                   'A Dance with Time','The Lost Key','Fires of Eternity','Wings of the Phoenix',
                                   'The Broken Crown','Into the Abyss','The Garden of Souls','The Enchanted Forest',
                                   'Beneath the Moonlight','The Midnight Song','The Fallen Star','Whispers in the Wind',
                                   'The Twilight Chronicles','The Rose of the Desert','Blood and Sand',
                                   'The Edge of the World','The Secret Beneath','Storm of Fire','The Last Knight',
                                   'Rise of the Forgotten','The Emerald City','Tales from the Other Side',
                                   'The Crystal Labyrinth','A Heart of Ice','The Shadow\'s Embrace','When the Stars Fade',
                                   'The Edge of Forever','The Sorcerer\'s Spell','In the Wake of the Storm',
                                   'The Celestial Map','The Firebird\'s Song','The Masked Stranger','Veins of Gold',
                                   'The Abyssal Tide','The Last Dreamer','Beneath the Starlight','The Phantom\'s Curse',
                                   'The Clockwork Prince'
                               );

            SET random_publication_year = FLOOR(1901 + RAND() * 124);
            REPEAT
                SET random_ISBN = CONCAT('978-', LPAD(FLOOR(RAND() * 1000000000000), 12, '0'));
            UNTIL NOT EXISTS(SELECT 1 FROM `library_denormalized`.`book` WHERE ISBN = random_ISBN)
            END REPEAT;

            SELECT id_author INTO author_1_id FROM `library_denormalized`.`author`
            ORDER BY RAND() LIMIT 1;

            IF RAND() > 0.5 THEN
                SELECT id_author INTO author_2_id FROM `library_denormalized`.`author`
                WHERE id_author <> author_1_id ORDER BY RAND() LIMIT 1;
            ELSE
                SET author_2_id = NULL;
            END IF;

            IF RAND() > 0.7 THEN
                SELECT id_author INTO author_3_id FROM `library_denormalized`.`author`
                WHERE id_author NOT IN (author_1_id, author_2_id) ORDER BY RAND() LIMIT 1;
            ELSE
                SET author_3_id = NULL;
            END IF;

            INSERT INTO `library_denormalized`.`book`(title, publication_year, ISBN, genre_name, author_1_id,
                                                      author_2_id, author_3_id, FK_genre)
            VALUES (random_title, random_publication_year, random_ISBN, genre_name,
                    author_1_id, author_2_id, author_3_id, genre_id);

            SET i = i + 1;
        END WHILE;

    CLOSE genre_cursor;
    COMMIT;

END $$


DROP PROCEDURE IF EXISTS InsertBookAuthors$$
CREATE PROCEDURE InsertBookAuthors(IN number_of_records INT)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE done INT DEFAULT 0;
    DECLARE book_id INT;
    DECLARE author_id INT;
    DECLARE author_count INT;

    DECLARE book_cursor CURSOR FOR SELECT id_book FROM `library_denormalized`.`book`;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    START TRANSACTION;

    OPEN book_cursor;

    WHILE i < number_of_records DO

            FETCH book_cursor INTO book_id;
            IF done THEN
                SET done = 0;
                CLOSE book_cursor;
                OPEN book_cursor;
                FETCH book_cursor INTO book_id;
            END IF;

            SET author_count = FLOOR(1 + RAND() * 3);

            WHILE author_count > 0 DO
                    SELECT id_author INTO author_id FROM `library_denormalized`.`author` ORDER BY RAND() LIMIT 1;

                    IF NOT EXISTS (
                        SELECT 1 FROM `library_denormalized`.`book_author`
                        WHERE FK_Book = book_id AND FK_Author = author_id
                    ) THEN
                        INSERT INTO `library_denormalized`.`book_author` (FK_book, FK_author)
                        VALUES (book_id, author_id);
                    END IF;

                    SET author_count = author_count - 1;
                END WHILE;

            SET i = i + 1;
        END WHILE;

    CLOSE book_cursor;
    COMMIT;

END $$

DROP PROCEDURE IF EXISTS InsertReservations$$
CREATE PROCEDURE InsertReservations(IN number_of_records INT)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE reservation_date DATE;
    DECLARE due_date DATE;
    DECLARE return_date DATE;
    DECLARE status ENUM('borrowed', 'returned');
    DECLARE book_id INT;
    DECLARE book_title VARCHAR(100);
    DECLARE book_ISBN VARCHAR(20);
    DECLARE member_id INT;
    DECLARE member_name VARCHAR(45);
    DECLARE member_surname VARCHAR(45);
    DECLARE done1 INT DEFAULT 0;
    DECLARE done2 INT DEFAULT 0;

    DECLARE book_cursor CURSOR FOR
        SELECT id_book, title, ISBN FROM `library_denormalized`.`book`;


    DECLARE member_cursor CURSOR FOR
        SELECT id_member, name, surname FROM `library_denormalized`.`member`;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done1 = 1, done2 = 1;

    START TRANSACTION;

    OPEN book_cursor;
    OPEN member_cursor;


    WHILE i < number_of_records DO

            FETCH book_cursor INTO book_id, book_title, book_ISBN;
            IF done1 THEN
                SET done1 = 0;
                CLOSE book_cursor;
                OPEN book_cursor;
                FETCH book_cursor INTO book_id, book_title, book_ISBN;
            END IF;


            FETCH member_cursor INTO member_id, member_name, member_surname;
            IF done2 THEN
                SET done2 = 0;
                CLOSE member_cursor;
                OPEN member_cursor;
                FETCH member_cursor INTO member_id, member_name, member_surname;
            END IF;

            SET reservation_date = DATE_SUB(CURDATE(), INTERVAL FLOOR(RAND() * 365) DAY);
            SET due_date = DATE_ADD(reservation_date, INTERVAL 14 DAY);
            SET return_date = IF(RAND() > 0.3, DATE_ADD(reservation_date, INTERVAL FLOOR(7 + RAND() * 14) DAY), NULL);
            SET status = IF(return_date IS NULL, 'borrowed', 'returned');

            INSERT INTO `library_denormalized`.`reservation`
            (reservation_date, due_date, return_date, status, book_title, book_ISBN, member_name, member_surname, FK_member, FK_book)
            VALUES
                (reservation_date, due_date, return_date, status, book_title, book_ISBN, member_name, member_surname, member_id, book_id);

            SET i = i + 1;
        END WHILE;

    CLOSE book_cursor;
    CLOSE member_cursor;
    COMMIT;
END $$


DELIMITER ;

SET FOREIGN_KEY_CHECKS = 0;

TRUNCATE TABLE `address`;
TRUNCATE TABLE `author`;
TRUNCATE TABLE `book`;
TRUNCATE TABLE `book_author`;
TRUNCATE TABLE `city`;
TRUNCATE TABLE `genre`;
TRUNCATE TABLE `member`;
TRUNCATE TABLE `nationality`;
TRUNCATE TABLE `reservation`;

SET FOREIGN_KEY_CHECKS = 1;

CALL InsertCities(1000);
CALL InsertGenres(1000);
CALL InsertNationalities(1000);
CALL InsertAddresses(1000);
CALL InsertAuthors(1000);
CALL InsertBooks(1000);
CALL InsertBookAuthors(1000);
CALL InsertMembers(1000);
CALL InsertReservations(1000);

SELECT * FROM `city`;
SELECT * FROM `genre`;
SELECT * FROM `nationality`;
SELECT * FROM `address`;
SELECT * FROM `author`;
SELECT * FROM `book`;
SELECT * FROM `book_author`;
SELECT * FROM `member`;
SELECT * FROM `reservation`;